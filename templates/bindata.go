// Code generated by go-bindata.
// sources:
// templates/404.html
// templates/home/index.html
// templates/layout/layout.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x31\x30\xe1\x02\x04\x00\x00\xff\xff\x93\x4f\x99\x21\x04\x00\x00\x00")

func templates404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates404Html,
		"templates/404.html",
	)
}

func templates404Html() (*asset, error) {
	bytes, err := templates404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/404.html", size: 4, mode: os.FileMode(420), modTime: time.Unix(1499330619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHomeIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xbd\x8e\x24\x35\x10\xce\xf7\x29\x7c\x0e\x98\x84\x1e\xef\x2e\x27\x84\xee\xda\x9d\xdc\x92\x81\xb8\x00\x21\x11\x9d\xaa\xdb\xd5\xd3\xb5\xb8\xed\xc6\xf6\xec\xec\x64\x44\xc4\x80\x2e\x3c\x92\x13\x12\x11\x12\x01\x11\x42\xbc\xcd\xed\xc1\x5b\x20\xbb\x7b\x66\x67\x76\xfe\xf6\xe7\x8e\x4d\xb6\xab\x5c\xf5\x55\xb9\xec\xaf\x5c\x93\x3f\x3a\xfb\xe2\xd9\x97\x5f\x3f\xff\x94\x35\xa1\xd5\xc5\x51\x1e\xff\x31\x0d\x66\x22\x47\x68\x46\xc5\x11\x63\x8c\xe5\x0d\x82\xea\x3f\x93\xd8\x62\x00\x56\x35\xe0\x3c\x06\x39\x9a\x86\x3a\xfb\x64\xb4\xb1\x6c\x4d\x40\x13\xe4\x68\x46\x2a\x34\x52\xe1\x05\x55\x98\x25\xe1\x43\x46\x86\x02\x81\xce\x7c\x05\x1a\xe5\xc9\x88\x19\x68\x51\x8e\x2e\x08\x67\x9d\x75\x61\x15\x2c\x50\xd0\x58\xfc\xf3\xeb\xf7\xff\xbe\xfe\xf1\xea\x87\x57\x6f\xff\x78\x9d\x8b\x5e\x77\x6d\xa3\xc9\x7c\xc3\x1c\x6a\xc9\x7d\x98\x6b\xf4\x0d\x62\xe0\xac\x71\x58\x4b\x2e\xba\x69\xa9\xa9\x12\x95\xf7\x42\x53\x29\x4a\x6b\x83\x0f\x0e\xba\x71\x4b\x66\x5c\x79\xcf\x59\xe5\xac\xf7\xd6\xd1\x84\x8c\xe4\x60\xac\x99\xb7\x76\xea\xf9\x3d\x03\xd4\xd6\x04\x98\xa1\xb7\x2d\x26\x5d\x94\xb3\x41\xf1\xbe\x62\x2e\x37\x95\x29\x02\x6d\x27\x0f\x8f\xd3\xa2\x22\x90\xdc\x57\x0e\xd1\x6c\x0b\xdb\xc4\xed\xa4\x10\x62\x05\xcc\x57\x8e\xba\xc0\xc2\xbc\x43\xc9\x03\x5e\x06\x71\x0e\x17\xd0\x6b\x39\xf3\xae\xba\x06\x39\xef\x53\x3f\xff\x76\x8a\x6e\x9e\x7d\x34\x3e\x1d\x9f\xa4\xb4\xcf\x3d\x2f\x72\xd1\xbb\x3c\x08\x79\xfd\xa4\xdf\x3d\xec\x6a\xad\x37\xd1\x73\x71\x4d\x9a\xbc\xb4\x6a\xbe\x12\x54\xd1\x05\xab\x34\x78\x2f\x47\x91\x26\x40\x06\xdd\xa8\x38\x5a\x1a\xdc\x34\xf2\x08\xae\x6a\x5e\xac\xda\xb2\x1b\x7f\x5b\xcc\xc9\xd4\x76\x8b\x65\x4f\xe8\xd3\x22\x17\xcd\xe9\x8e\x55\x45\x17\x45\x4e\xed\x64\x7d\xff\xd4\xc2\x04\x05\x18\x6a\x21\x90\x35\xe3\x09\xd5\x9c\x35\x48\x93\x26\x48\x7e\x72\x7c\x1c\x6f\x42\x2e\xa2\xef\x66\x76\x3b\xd4\x9b\x49\xd7\xd6\xb5\xbb\x92\x5e\xb1\x76\x76\xb6\xc3\xea\x86\x25\x8f\x80\xd9\xc4\xd9\x69\xc7\x86\x10\xa5\xbd\xbc\x2e\x25\xdf\x8d\x92\x90\xe2\x95\x00\x87\xb0\x06\x17\xbd\x9d\xd5\x2b\x80\x9c\x75\x1a\x2a\x6c\xac\x56\xe8\x24\x8f\x97\x61\xe1\x79\x20\x80\xef\xc0\x2c\xc0\x7b\xbc\x98\x5f\xa0\x8e\x0f\x4d\xef\xcd\xab\xdf\xdf\xfc\xfc\x5d\x2e\xa2\xe1\x9e\x2d\x6f\xaf\xf0\xfe\x8a\x1c\xda\x7c\x39\x0d\xc1\x9a\x81\x1c\xbd\xc0\x17\x28\x65\x30\x4c\x61\x6b\x5f\x94\xd3\xc0\x8b\xab\xbf\x5e\xbe\xfd\xe5\xcf\x5c\xf4\x46\x0f\x84\x5d\x94\x35\x01\xff\xf4\xdb\xd5\xcb\xbf\x0f\x03\xbf\x97\xfd\x1f\xa2\xc0\x69\xcf\x81\x01\x57\x5b\x50\x64\x26\x5c\xdc\x2b\xcb\xdb\x33\x67\x50\xad\xeb\x1e\x65\x43\x3b\xca\xb2\x62\x57\x1f\xe1\xad\x55\xa0\x59\x0d\x0a\x39\x23\x25\xf9\x73\x0d\xf3\xaf\x48\xa1\x3d\x4b\xae\x9c\x05\x28\xc9\x28\xbc\x94\x3c\x3b\xe1\xcc\x59\x8d\x92\xab\x61\x0d\x1c\x41\xa6\xa1\x44\xad\x51\x95\x73\xc9\xdb\xf9\xe7\x11\xef\xb3\xa8\xda\x52\xc9\x8d\xc0\xd9\x02\x69\xc0\xb5\xd5\xb4\x45\x13\x76\x1c\xc2\xa6\xfb\x30\x51\xec\x39\xb4\x4d\x9f\xd8\x83\x0f\x93\x7c\xdf\x85\xac\xb4\xf5\xc8\x99\x82\x00\x99\x22\xdf\xd2\x12\x7c\xb5\x24\x92\x3f\x4b\x76\xfb\x03\xb1\x25\xe1\x93\x67\x43\x4a\xa1\x91\x3c\xb8\x29\xf2\xe2\x83\x40\x2d\xfa\xa7\x87\x88\x9e\x30\x6e\xc7\xb3\xe6\xf1\x7a\x31\xd2\xd8\xc4\x8b\x74\x6a\x2c\x09\xb9\x68\x1e\xbf\x13\x4e\xf5\x01\xe2\x33\x77\xa8\xd6\xd1\x29\x0d\x1a\x92\xa7\x61\xf0\x09\xfb\xf8\xf8\xb8\xbb\x7c\xda\x3f\x24\x4f\xd8\xe3\x24\xdd\xaa\x90\x77\x7e\xba\x3b\x0d\x73\x74\xc2\xe3\x8c\x3c\x8e\x7b\x69\xf1\x7c\x27\x42\xf8\x59\xbd\x7d\x4e\xb8\x4f\x79\xee\x5a\xbd\xda\xda\x70\xf8\xae\xd2\xb2\x8d\x01\xab\x21\x53\x76\x66\x62\xe3\x61\xc1\x9e\x0d\x9f\x7c\xdb\xed\xca\x05\xfd\x3f\x6d\x69\x4d\xb5\xec\x4a\x0c\x8d\x8a\x9d\xe9\x68\x8b\x75\x2e\xae\xc7\xa3\x3b\x1e\x6a\x1a\x42\xd7\x4f\x2c\x17\xfd\x0f\x99\xff\x02\x00\x00\xff\xff\x83\xd0\x66\x4c\xd9\x0c\x00\x00")

func templatesHomeIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomeIndexHtml,
		"templates/home/index.html",
	)
}

func templatesHomeIndexHtml() (*asset, error) {
	bytes, err := templatesHomeIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/home/index.html", size: 3289, mode: os.FileMode(420), modTime: time.Unix(1500870136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\x52\x50\x50\x50\xb0\xc9\x48\x4d\x4c\x81\x30\xc1\xdc\x92\xcc\x92\x9c\x54\xbb\x27\x3b\x76\xbf\x5c\xb8\xd5\x46\x1f\xc2\x83\x28\xd4\x47\xa8\xb4\x49\xca\x4f\xa9\x44\x68\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xd0\x53\xa8\xad\x85\xea\x84\x28\xb7\xd1\x87\x58\x0b\x08\x00\x00\xff\xff\xc1\x87\x16\x2a\x7e\x00\x00\x00")

func templatesLayoutLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutLayoutHtml,
		"templates/layout/layout.html",
	)
}

func templatesLayoutLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout/layout.html", size: 126, mode: os.FileMode(420), modTime: time.Unix(1499327819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/404.html": templates404Html,
	"templates/home/index.html": templatesHomeIndexHtml,
	"templates/layout/layout.html": templatesLayoutLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{templates404Html, map[string]*bintree{}},
		"home": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHomeIndexHtml, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"layout.html": &bintree{templatesLayoutLayoutHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

